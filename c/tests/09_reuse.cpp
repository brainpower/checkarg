// SPDX-License-Identifier: MIT
// Copyright (c) 2021-2022 brainpower <brainpower at mailbox dot org>

#include "test.hpp"


int
callback(CheckArg *, const char *, const char *) {
  return 0;
}

TEST_CASE("reuse", "[reuse]") {
  const vector<const char *> argv1 = {"/test08", "-a", "a-val"};
  const vector<const char *> argv2 = {"/test08", "--beta", "b-val"};
  const vector<const char *> argv3 = {"/test08", "-c", "c-val"};
  const vector<const char *> argv4 = {"/test08", "--delta", "d-val"};
  const vector<const char *> argv5 = {"/test08", "-z", "z-val"};
  const vector<const char *> argv6 = {"/test08", "--ag", "ag-val"};
  const vector<const char *> argv7 = {"/test08", "--ng", "ng-val"};

  CheckArgUPtr ca(checkarg_new("test09", NULL, NULL), &checkarg_free);

  checkarg_add_autohelp(ca.get());
  // clang-format off
  checkarg_add(ca.get(), 'z', "ag",    "autogenerated value name", CA_VT_REQUIRED, "");
  checkarg_add(ca.get(), 'y', "ng",    "no value name",     CA_VT_REQUIRED, NULL);
  checkarg_add(ca.get(), 'i', "input", "file to read from", CA_VT_REQUIRED, "IPT");
  checkarg_add(ca.get(), 'a', "alpha", "alpha option",      CA_VT_REQUIRED, "A");
  checkarg_add_long(ca.get(), "beta",  "beta option",       CA_VT_REQUIRED, "B");
  // clang-format on

  checkarg_add_cb(
    ca.get(), 'c', "gamma", callback, "gamma option", CA_VT_REQUIRED, "C");
  checkarg_add_long_cb(
    ca.get(), "delta", callback, "delta option", CA_VT_REQUIRED, "D");


  int rc = checkarg_parse(ca.get(), argv1.size(), (char **)argv1.data());
  CHECK(CA_ALLOK == rc);
  REQUIRE(checkarg_isset(ca.get(), "alpha"));
  REQUIRE(string(checkarg_value(ca.get(), "alpha")) == "a-val");

  rc = checkarg_parse(ca.get(), argv2.size(), (char **)argv2.data());
  CHECK(CA_ALLOK == rc);
  REQUIRE(!checkarg_isset(ca.get(), "alpha"));
  REQUIRE(checkarg_value(ca.get(), "alpha") == NULL);
  REQUIRE(checkarg_isset(ca.get(), "beta"));
  REQUIRE(string(checkarg_value(ca.get(), "beta")) == "b-val");

  rc = checkarg_parse(ca.get(), argv3.size(), (char **)argv3.data());
  CHECK(CA_ALLOK == rc);
  REQUIRE(!checkarg_isset(ca.get(), "alpha"));
  REQUIRE(checkarg_value(ca.get(), "alpha") == NULL);
  REQUIRE(!checkarg_isset(ca.get(), "beta"));
  REQUIRE(checkarg_value(ca.get(), "beta") == NULL);
  REQUIRE(checkarg_isset(ca.get(), "gamma"));
  REQUIRE(string(checkarg_value(ca.get(), "gamma")) == "c-val");

  rc = checkarg_parse(ca.get(), argv4.size(), (char **)argv4.data());
  CHECK(CA_ALLOK == rc);
  REQUIRE(!checkarg_isset(ca.get(), "alpha"));
  REQUIRE(checkarg_value(ca.get(), "alpha") == NULL);
  REQUIRE(!checkarg_isset(ca.get(), "beta"));
  REQUIRE(checkarg_value(ca.get(), "beta") == NULL);
  REQUIRE(!checkarg_isset(ca.get(), "gamma"));
  REQUIRE(checkarg_value(ca.get(), "gamma") == NULL);
  REQUIRE(checkarg_isset(ca.get(), "delta"));
  REQUIRE(string(checkarg_value(ca.get(), "delta")) == "d-val");

  rc = checkarg_parse(ca.get(), argv5.size(), (char **)argv5.data());
  CHECK(CA_ALLOK == rc);
  REQUIRE(!checkarg_isset(ca.get(), "alpha"));
  REQUIRE(checkarg_value(ca.get(), "alpha") == NULL);
  REQUIRE(!checkarg_isset(ca.get(), "beta"));
  REQUIRE(checkarg_value(ca.get(), "beta") == NULL);
  REQUIRE(!checkarg_isset(ca.get(), "gamma"));
  REQUIRE(checkarg_value(ca.get(), "gamma") == NULL);
  REQUIRE(!checkarg_isset(ca.get(), "delta"));
  REQUIRE(checkarg_value(ca.get(), "delta") == NULL);
  REQUIRE(checkarg_isset(ca.get(), "ag"));
  REQUIRE(string(checkarg_value(ca.get(), "ag")) == "z-val");

  rc = checkarg_parse(ca.get(), argv6.size(), (char **)argv6.data());
  CHECK(CA_ALLOK == rc);
  REQUIRE(!checkarg_isset(ca.get(), "alpha"));
  REQUIRE(checkarg_value(ca.get(), "alpha") == NULL);
  REQUIRE(!checkarg_isset(ca.get(), "beta"));
  REQUIRE(checkarg_value(ca.get(), "beta") == NULL);
  REQUIRE(!checkarg_isset(ca.get(), "gamma"));
  REQUIRE(checkarg_value(ca.get(), "gamma") == NULL);
  REQUIRE(!checkarg_isset(ca.get(), "delta"));
  REQUIRE(checkarg_value(ca.get(), "delta") == NULL);
  REQUIRE(checkarg_isset(ca.get(), "ag"));
  REQUIRE(string(checkarg_value(ca.get(), "ag")) == "ag-val");

  rc = checkarg_parse(ca.get(), argv7.size(), (char **)argv7.data());
  CHECK(CA_ALLOK == rc);
  REQUIRE(!checkarg_isset(ca.get(), "alpha"));
  REQUIRE(checkarg_value(ca.get(), "alpha") == NULL);
  REQUIRE(!checkarg_isset(ca.get(), "beta"));
  REQUIRE(checkarg_value(ca.get(), "beta") == NULL);
  REQUIRE(!checkarg_isset(ca.get(), "gamma"));
  REQUIRE(checkarg_value(ca.get(), "gamma") == NULL);
  REQUIRE(!checkarg_isset(ca.get(), "delta"));
  REQUIRE(checkarg_value(ca.get(), "delta") == NULL);
  REQUIRE(!checkarg_isset(ca.get(), "ag"));
  REQUIRE(checkarg_value(ca.get(), "ag") == NULL);
  REQUIRE(checkarg_isset(ca.get(), "ng"));
  REQUIRE(string(checkarg_value(ca.get(), "ng")) == "ng-val");
}
